import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:yandexmap/map_booking_screen.dart';
import 'package:yandexmap/src/features/authentification/models/users_model.dart';
import 'package:yandexmap/src/repository/auth_repository.dart';
import 'package:yandexmap/src/repository/user_repository/user_repository.dart';

class SignUpController extends GetxController {
  final email = TextEditingController();
  final password = TextEditingController();
  final fullName = TextEditingController();
  final phoneNo = TextEditingController();

  static SignUpController get instance => Get.find();

  void phoneAuthentification(String phoneNo) {
    AuthentificationRepository.instance.phoneAuthentification(phoneNo);
  }

  /// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firestore
  Future<void> registerUser(BuildContext context, String email, String password) async {
    try {
      print("üì§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $email");

      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);

      final user = userCredential.user;
      if (user != null) {
        final newUser = UsersModel(
          id: user.uid,
          fullName: fullName.text.trim(),
          email: email.trim(),
          phoneNo: phoneNo.text.trim(),
          role: 'user',
        );

        try {
          await UserRepository.saveUser(newUser);
          print("‚úÖ Firestore: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
        } catch (e) {
          print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore: $e");
        }
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Firestore: ${user.uid}");

        Get.snackbar("–£—Å–ø–µ—Ö", "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
        Get.offAll(() => const MapBooking());
      } else {
        print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω null –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        throw Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω");
      }
    } on FirebaseAuthException catch (e) {
      print("‚ùå FirebaseAuthException: ${e.message}");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(e.message ?? "Registration failed"), backgroundColor: Colors.red),
      );
    } catch (e) {
      print("‚ùå Unknown error: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."), backgroundColor: Colors.red),
      );
    }
  }

  /// üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É
Future<void> loginUser(BuildContext context, String email, String password) async {
  print("üì§ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $email");

  try {
    UserCredential credential = await FirebaseAuth.instance
        .signInWithEmailAndPassword(email: email, password: password);

    if (credential.user != null) {
      print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ MapBooking");
      Get.offAll(() => const MapBooking());
    } else {
      print("‚ö†Ô∏è –õ–æ–≥–∏–Ω –Ω–µ—É–¥–∞—á–Ω—ã–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å null");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"), backgroundColor: Colors.red),
      );
    }
  } on FirebaseAuthException catch (e) {
    print("‚ùå FirebaseAuthException: ${e.message}");
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(e.message ?? "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"), backgroundColor: Colors.red),
    );
  } catch (e) {
    print("‚ùå Unknown error: $e");
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"), backgroundColor: Colors.red),
    );
  }
}

}
