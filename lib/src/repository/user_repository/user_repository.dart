import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:yandexmap/src/features/authentification/models/users_model.dart';

class UserRepository {
  static final _db = FirebaseFirestore.instance;

  /// üîπ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
static Future<void> saveUser(UsersModel user) async {
  final uid = FirebaseAuth.instance.currentUser?.uid;
  if (uid == null) throw Exception("User not logged in");

  print("üíæ [UserRepository] UID: $uid");
  print("üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${user.toJson()}");

  await _db.collection("Users").doc(uid).set(user.toJson());

  print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Firestore");
}


  /// üîπ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  static Future<UsersModel> getUserById(String uid) async {
    final snapshot = await _db.collection("Users").doc(uid).get();
    if (!snapshot.exists) throw Exception("User not found");

    return UsersModel.fromSnapshot(snapshot.data()!, snapshot.id);
  }

  /// üîπ –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<String> getUserRole(String uid) async {
    final snapshot = await _db.collection("Users").doc(uid).get();
    if (!snapshot.exists) return "user";

    final data = snapshot.data()!;
    return (data['role'] ?? 'user').toString().trim(); // üëà trim —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã
  }


  /// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–¥–º–∏–Ω–∞)
  static Future<List<UsersModel>> getAllUsers() async {
    final query = await _db.collection("Users").get();
    return query.docs.map((doc) => UsersModel.fromSnapshot(doc.data(), doc.id)).toList();
  }

  /// üîπ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> updateUser(UsersModel user) async {
    if (user.id == null) throw Exception("User ID is required");
    await _db.collection("Users").doc(user.id).update(user.toJson());
  }

  /// üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–º)
  static Future<void> deleteUser(String uid) async {
    await _db.collection("Users").doc(uid).delete();
  }
}
